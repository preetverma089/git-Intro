Git and Git Hub
 

git: It is version control sytem for track changes

it is populuar due to free and open source


mazor things to  use this:

1: track the history of the code 







setup git first check config setup

git config —list
git config —global user.name “Name"
git config —global user-email “email” 


for local 

git config —local user.name “name”
git config — local user.email “email”



Clone and status 

Clone:

git clone <repo_url>

ls: it is used for checkinh all files that present in folder
ls -a : this command is used for all files including hidden files
status 


git status  
it gives us status of our files 

It gives four types of status.

Untracked: new file that does not exist on git.
modified: those files in which changes have been made.
Staged: file is ready to commit.
unmodified: those files in which no changes have been made.




after modification in any file we have two steps process

to update changes on git it is 2 step process

1:  Add (command: {
git add <filename>: it is used for specific file
git add . :  it add all files in staging area
} )
2: Commit (Command:{
  git commit -m “messageName”: it is used to commit with message and commit all changes to git, it is record of changes
})

git log: this commands for logs all commit that i done

push command:
git push: this command is used to push all changes on git (push local changes to remote)
git push orign main:  all the repo on git specific main repo to push that code 



Now those commands for creating git repo from my code

git init: 
git remote add origin <Link> : this command basically for connecting my git repo to my folder 
git remote -v (to verify remote) : this command for check my repo is connected or not 
git branch (to check branch): 
git branch -m main (to rename branch)
git push origin main -u:  this is basicallty for setting like i have to work more time in this branch thats why we use this 


git pull: this command is used for getting changed from remote to local branch 


Git branches:

git branch: to check we work on which branch
git branch -m main (to rename branch)
git checkout <branchName> to navigate to that branch
git checkout -b <branchname> to create new branch
git branch -d <branchName> to delete the branch


merging code in two ways

git diff <branchName>: to compare changes between two branches

git merge <branchName>: to merge code between two branches


second way: create pr(pull requests)


Undoing changes:

staged changes: those changes that are added but dont want commit we can use these commnds

git reset <fileName>
git reset (for all files)


commit reset for single commit :
git reset HEAD~1: this is for latest commit will be reset

Commit reset for multiple commits: 

git reset <commit hashCode>
git reset —hard <commit hashCode>


fork: this is for creating a rough copy of that project in your branch








